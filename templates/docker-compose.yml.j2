#jinja2: lstrip_blocks: True
# {{ ansible_managed }}
# Source: https://github.com/netbox-community/netbox-docker/blob/release/docker-compose.yml

version: '3.4'
services:
  netbox: &netbox
    image: {{ netbox_netbox_image }}
    depends_on:
    - postgres
    - redis
    - redis-cache
    - netbox-worker
    env_file: env/netbox.env
    user: '101'
    volumes:
    - ./reports:/etc/netbox/reports:z,ro
    - ./scripts:/etc/netbox/scripts:z,ro
    - netbox-media-files:/opt/netbox/netbox/media:z
    {% if netbox_port %}
    ports:
    - "{{ netbox_port }}:8080"
    {% else %}
    expose:
    - "8080"
    {% endif %}
    restart: unless-stopped
    {% if netbox_container_labels %}
    labels:
      {{ netbox_container_labels | to_nice_yaml | indent(6) }}
    {% endif %}
    networks:
    - default
    {% if netbox_proxy_network_name %}
    - proxy
    {% endif %}

  netbox-worker:
    <<: *netbox
    depends_on:
    - redis
    entrypoint:
    - /opt/netbox/venv/bin/python
    - /opt/netbox/netbox/manage.py
    command:
    - rqworker
    ports: []
    expose: []
    labels: []
    networks:
    - default
    restart: unless-stopped

  postgres:
    image: {{ netbox_postgres_image }}
    env_file: env/postgres.env
    volumes:
    - netbox-postgres-data:/var/lib/postgresql/data
    networks:
    - default
    restart: unless-stopped

  redis:
    image: {{ netbox_redis_image }}
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: env/redis.env
    volumes:
    - netbox-redis-data:/data
    networks:
    - default
    restart: unless-stopped

  redis-cache:
    image: {{ netbox_redis_image }}
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: env/redis-cache.env
    networks:
    - default
    restart: unless-stopped

  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    ports:
      # HTTPS / SSL port
      - "443:443"
      # The Traefik Web UI port (enabled by api:insecure: true in traefik.yml)
      - "8080:8080"
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config.yml:/etc/traefik/config.yml:ro
      - ./certs:/etc/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    {% if traefik_container_labels %}
    labels:
      {{ traefik_container_labels | to_nice_yaml | indent(6) }}
    {% endif %}
    networks:
    - default
#    {% if traefik_proxy_network_name %}
#    - proxy
#    {% endif %}

volumes:
  netbox-media-files:
    driver: local
  netbox-postgres-data:
    driver: local
  netbox-redis-data:
    driver: local

#{% if traefik_proxy_network_name %}
#networks:
#  proxy:
#    external:
#      name: {{ traefik_proxy_network_name }}
#{% endif %}
